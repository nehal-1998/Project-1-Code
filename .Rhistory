library(sets)
library(ggplot2)
library(tidyverse)
library(ISLR)
library(moments)
library(dplyr)
df1 <- read.csv("2015_KSI.csv")
setwd("C:/Users/nehal/OneDrive/Desktop/Sheridan/data analytics/project")
library(sets)
library(ggplot2)
library(tidyverse)
library(ISLR)
library(moments)
library(dplyr)
df1 <- read.csv("2015_KSI.csv")
setwd("C:/Users/nehal/OneDrive/Desktop/Sheridan/data analytics/project")
library(sets)
library(ggplot2)
library(tidyverse)
library(ISLR)
library(moments)
library(dplyr)
df1 <- read.csv("2015_KSI.csv")
setwd("C:/Users/nehal/OneDrive/Desktop/Sheridan/data analytics/project/final")
library(sets)
library(ggplot2)
library(tidyverse)
library(ISLR)
library(moments)
library(dplyr)
df1 <- read.csv("2015_KSI.csv")
df2 <- read.csv("2016_KSI.csv")
df3 <- read.csv("2017_KSI.csv")
df4 <- read.csv("2018_KSI.csv")
colnames1 <- colnames(df1)
colnames2 <- colnames(df2)
colnames3 <- colnames(df3)
colnames4 <- colnames(df4)
check_similarity <- function(df1, df2, df3, df4) {
colnames1 <- colnames(df1)
colnames2 <- colnames(df2)
colnames3 <- colnames(df3)
colnames4 <- colnames(df4)
identical_colnames1_2 <- all(colnames1 == colnames2)
identical_colnames1_3 <- all(colnames1 == colnames3)
identical_colnames1_4 <- all(colnames1 == colnames4)
identical_colnames2_3 <- all(colnames1 == colnames4)
identical_colnames2_4 <- all(colnames1 == colnames4)
identical_colnames3_4 <- all(colnames3 == colnames4)
cat("Are the columns in df1 and df2 identical? ", identical_colnames1_2, "\n")
cat("Are the columns in df1 and df3 identical? ", identical_colnames1_3, "\n")
cat("Are the columns in df1 and df4 identical? ", identical_colnames1_4, "\n")
cat("Are the columns in df2 and df3 identical? ", identical_colnames2_3, "\n")
cat("Are the columns in df2 and df3 identical? ", identical_colnames2_4, "\n")
cat("Are the columns in df3 and df4 identical? ", identical_colnames3_4, "\n")
}
check_similarity(df1, df2, df3, df4)
diff_colnames1_2 <- setdiff(colnames1, colnames2)
diff_colnames2_1 <- setdiff(colnames2, colnames1)
diff_colnames1_3 <- setdiff(colnames1, colnames3)
diff_colnames3_1 <- setdiff(colnames3, colnames1)
diff_colnames2_3 <- setdiff(colnames2, colnames3)
diff_colnames3_2 <- setdiff(colnames3, colnames2)
# Print the differences
cat("Columns in df1 but not in df2: ", diff_colnames1_2, "\n")
cat("Columns in df2 but not in df1: ", diff_colnames2_1, "\n")
cat("cols df1 ", ncol(df1), "\n")
cat("cols df2", ncol(df2), "\n")
print("-----------------")
cat("Columns in df1 but not in df3: ", diff_colnames1_3, "\n")
cat("Columns in df3 but not in df1: ", diff_colnames3_1, "\n")
cat("cols df1", ncol(df1), "\n")
cat("cols df3", ncol(df3), "\n")
print("-----------------")
cat("Columns in df2 but not in df3: ", diff_colnames2_3, "\n")
cat("Columns in df3 but not in df2: ", diff_colnames3_2, "\n")
cat("cols df2", ncol(df2), "\n")
cat("cols df3", ncol(df3), "\n")
colnames(df1)[which(colnames(df1) == "VEHICLES_IN_STREET")] <- "VEHICLE_IN_STREET"
colnames(df2)[which(colnames(df2) == "VEHICLE_STREET")] <- "VEHICLE_IN_STREET"
colnames(df2)[which(colnames(df2) == "NEIGHBOUR")] <- "NEIGHBOURHOOD"
check_similarity(df1, df2, df3, df4)
df_combined <- rbind(df1, df2, df3, df4)
cat("rows ",nrow(df_combined),"\n")
cat("cols", ncol(df_combined))
colnames(df_combined)
df_q1 <- df_combined[c("YEAR", "VEHICLE_IN_STREET", "DISTRICT", "NEIGHBOURHOOD")]
str(df_q1)
df_q1$NEIGHBOURHOOD <- str_trim(sub("\\(.*", "", df_q1$NEIGHBOURHOOD))
#Here we are making use of sub function to take anything a "space followed by an open parentheses and any number followed after", this portion is replaced by empty space, which can then be trimmed using the str_trim function.
nrow(df_q1)
unique(df_q1$YEAR)
unique(df_q1$VEHICLE_IN_STREET)
unique(df_q1$NEIGHBOURHOOD)
unique(df_q1$DISTRICT)
tor_rows <- df_combined[grepl("tor", df_combined$DISTRICT, ignore.case = TRUE), ]
tor_rows_no_none <- filter(tor_rows, tor_rows$INJURY != "None")
tor_rows_no_none$NEIGHBOURHOOD <- str_trim(sub("\\(.*", "", tor_rows_no_none$NEIGHBOURHOOD))
neighbourhood_count <- table(tor_rows_no_none$NEIGHBOURHOOD)
neighbourhood_count_df <- as.data.frame(neighbourhood_count, responseName = "count")
names(neighbourhood_count_df) <- c("Neighbourhood", "count")
neighbourhood_count_df
ggplot(neighbourhood_count_df, aes(x = Neighbourhood, y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Neighbourhood", y = "Number of people killed or injured", title = "Counts of Unique Neighbourhood cases")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
unique(df_q1$DISTRICT)
#We have used the subset function to get the data for only those districts which has Null values
subset(df_q1, DISTRICT == "<Null>")
subset(df_q1, DISTRICT == "<Null>")
#This is done by creating another data frame called df_q2. To get the total number of vehicles in street with respect to the neighborhood we use the tapply function.
df_q2 <- as.data.frame(tapply(df_q1$VEHICLE_IN_STREET, df_q1$DISTRICT, FUN = sum))
#We name the total number of vehicles in the street during the accident as "count"
names(df_q2) <- c( "count")
df_q2
#The central tendency measure "MEAN" is the average value for a given set of data.
# Using tapply we can group the "VEHICLES_IN_STREET" based on neighborhood values, after which we can find the mean of each of these values per group.This data will further be used to make the table.
avg_per_hood <- tapply(df_q1$VEHICLE_IN_STREET, df_q1$NEIGHBOURHOOD, FUN = mean)
# using sort function to arrange top Average vehicles in order.
avg_per_hood_sort <- sort(avg_per_hood, decreasing = TRUE)
#Selecting the top five rows of the sorted data
df_q3 <- as.data.frame(avg_per_hood_sort[1:5])
# Here we are Changing column name to count
names(df_q3) <- c( "count")
df_q3
colnames(df_combined)
df_analyze <- df_combined[c("HOUR","ROAD_CLASS", "DISTRICT", "LOCCOORD", "ACCLOC", "TRAFFCTL", "VISIBILITY", "LIGHT", "RDSFCOND", "ACCLASS", "INJURY", "SPEEDING", "REDLIGHT", "ALCOHOL", "NEIGHBOURHOOD", "VEHICLE_IN_STREET")]
str(df_analyze)
cat("Number of null in district ", sum(df_analyze$DISTRICT == "<Null>"), "\n")
cat("Number of null in Neighbourhood ", sum(df_analyze$NEIGHBOURHOOD == "<Null>"), "\n")
df_analyze <- subset(df_analyze, DISTRICT != "<Null>")
#Using this line of code we drop the rows containing null in the district column
cat("Number of null in district ", sum(df_analyze$DISTRICT == "<Null>"), "\n")
#We check the number of null values in district again to make sure that the null value rows are dropped
hist(df_analyze$HOUR, xlab = "Frequenecy of accidents wrt to Hour",
main="Histogram of total number of accidents wrt to Hour",
col="orange", breaks = 20)
tapply(df_analyze$HOUR, df_analyze$DISTRICT, FUN = mean)
cat("Before: \n unique values in speeding", unique(df_analyze$SPEEDING), "\n")
#converting the null values to no
df_analyze$SPEEDING <- gsub("<Null>", "No", df_analyze$SPEEDING)
cat("After: \n unique values in speeding", unique(df_analyze$SPEEDING))
#using factor function to convert it into levels "Yes" and "No"
#This function will help give "yes" and "no" levels which eventually will make R Realize that the data is ordinal in the speeding column
df_analyze$SPEEDING <- factor(df_analyze$SPEEDING, levels = c("Yes", "No"), ordered= TRUE)
summary(df_analyze$SPEEDING)
boxplot(HOUR ~ SPEEDING, data = df_analyze)
